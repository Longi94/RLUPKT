using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace RLUPKT.Core.Encryption
{

    public class WrongKeyExceptin : Exception
    {
        public WrongKeyExceptin(string message)
           : base(message)
        {
        }
    }

    public class AESKeys
    {
        public static readonly byte[] AESKey1 =
        {
        0xC7, 0xDF, 0x6B, 0x13, 0x25, 0x2A, 0xCC, 0x71, 0x47, 0xBB, 0x51, 0xC9, 0x8A, 0xD7, 0xE3, 0x4B,
        0x7F, 0xE5, 0x00, 0xB7, 0x7F, 0xA5, 0xFA, 0xB2, 0x93, 0xE2, 0xF2, 0x4E, 0x6B, 0x17, 0xE7, 0x79
        };
        public static readonly byte[] AESKey2 =
        {
        0xBC, 0x19, 0x0A, 0x5A, 0x8D, 0x34, 0xDC, 0x71, 0xDE, 0x90, 0x51, 0x69, 0xC2, 0xCC, 0x24, 0x57,
        0x80, 0x0F, 0x2A, 0x1C, 0x69, 0x0C, 0x11, 0x31, 0x08, 0xF1, 0x2A, 0x33, 0x26, 0xA6, 0x6D, 0xA0
        };

        public static readonly byte[] AESKey3 =
        {
        0x40, 0x21, 0xF6, 0x55, 0xB8, 0x10, 0xD4, 0xC6, 0x71, 0x28, 0x17, 0x8A, 0x58, 0x69, 0x1B, 0x51,
        0x23, 0xFC, 0x1B, 0xD5, 0x9D, 0xAE, 0xED, 0x45, 0x35, 0x68, 0xA5, 0x9E, 0xF2, 0x97, 0x01, 0xFF
        };

        public static readonly byte[] AESKey4 =
        {
        0xA0, 0x8A, 0xDA, 0x23, 0xB2, 0x17, 0xBB, 0x15, 0x59, 0x83, 0xAC, 0xC6, 0xB5, 0x69, 0x00, 0x18,
        0xF4, 0x5F, 0x83, 0x2B, 0x3B, 0xA6, 0x79, 0x76, 0xF3, 0xAF, 0xEC, 0x30, 0x8C, 0xA8, 0x1E, 0x42
        };
        public static readonly byte[] AESKey5 =
        {
        0x01, 0xA5, 0xF4, 0xFC, 0x4D, 0x4E, 0x1E, 0x58, 0xA2, 0x08, 0xA6, 0xEF, 0xFB, 0x11, 0x2A, 0x42,
        0x00, 0xA8, 0x34, 0xF8, 0x03, 0x65, 0xFC, 0x1E, 0x61, 0x7D, 0x4A, 0x0F, 0x92, 0x4F, 0xC0, 0xB4
        };
        public static readonly byte[] AESKey6 =
        {
         0x65, 0x5F, 0xBB, 0x30, 0x5D, 0x2D, 0xEF, 0x21, 0x7E, 0xF0, 0xD9, 0x38, 0x1B, 0x70, 0x44, 0x4C,
         0xFA, 0x0E, 0xC8, 0x5B, 0x36, 0x01, 0x39, 0xDB, 0x7D, 0xD7, 0xC1, 0x82, 0xA6, 0x0F, 0x6D, 0x63
        };
        public static readonly byte[] AESKey7 =
        {
        0x4C, 0x65, 0xEE, 0xEC, 0x3F, 0xC7, 0xF1, 0xFB, 0x48, 0x8D, 0x3C, 0xD9, 0xBF, 0xFD, 0xE0, 0x9C,
        0x28, 0xBE, 0x51, 0x4D, 0x1F, 0x80, 0x07, 0x50, 0xDF, 0x77, 0x95, 0xAE, 0xE5, 0x3C, 0x19, 0x33
        };
        public static readonly byte[] AESKey8 =
        {
        0xF3, 0x3B, 0x3C, 0xC2, 0x69, 0x62, 0xBC, 0x8E, 0xBF, 0xA6, 0xB8, 0x13, 0x2F, 0x09, 0x2A, 0x24,
        0x2D, 0x29, 0xC1, 0x48, 0xAC, 0x41, 0xFB, 0x86, 0x87, 0xF6, 0xF1, 0x60, 0x85, 0xB6, 0x6E, 0xAC
        };

        public static readonly byte[] AESKey9 =
        {
        0xA4, 0x57, 0x73, 0xEB, 0x30, 0x89, 0x84, 0xF8, 0x2D, 0xC6, 0x6A, 0x76, 0x37, 0xD2, 0xC1, 0xE7,
        0x86, 0xE4, 0x42, 0x2C, 0x20, 0xDE, 0xED, 0x4B, 0x8D, 0x77, 0xD2, 0xFD, 0x55, 0xBA, 0xB3, 0x26
        };


        public static List<byte[]> KeyList = new List<byte[]> { AESKey1, AESKey2, AESKey3, AESKey4, AESKey5, AESKey6, AESKey7, AESKey8, AESKey9 };
 

    }

    public class RLDecryptor
    {
        public ICryptoTransform GetCryptoTransform(byte[] Key)
        {
            var RLDecrptor = new RijndaelManaged
            {
                KeySize = 256,
                Key = Key,
                Mode = CipherMode.ECB,
                Padding = PaddingMode.None
            };

            return RLDecrptor.CreateDecryptor();
        }
    }
}
